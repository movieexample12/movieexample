/*
 * Copyright (C) 2010 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.listmovie.cinema.database;

import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;

/**
 * Provides access to the dictionary database.
 */
public class CinemaProvider extends ContentProvider {
    String TAG = CinemaProvider.class.getName();

    public static final String AUTHORITY = "com.listmovie.cinema.database.CinemaProvider";
    public static final Uri CONTENT_URI = Uri.parse("content://" + AUTHORITY + "/dictionary");

    /**
     * The content URI base for a single note. Callers must
     * append a numeric note id to this Uri to retrieve a note
     */
    public static final Uri CONTENT_ID_URI_BASE
        = Uri.parse(CONTENT_URI + "/#");

    // MIME types used for searching words or looking up a single definition
    public static final String CINEMAS_MIME_TYPE = ContentResolver.CURSOR_DIR_BASE_TYPE +
                                                  "/vnd.example.android.searchabledict";
    public static final String DEFINITION_MIME_TYPE = ContentResolver.CURSOR_ITEM_BASE_TYPE +
                                                       "/vnd.example.android.searchabledict";

    private CinemaDatabase mDictionary;
    private CinemaOpenHelper mOpenHelper;
    // UriMatcher stuff
    private static final int CINEMAS = 0;
    private static final int CINEMA_ID = 1;

    /**
     * A UriMatcher instance
     */
    private static final UriMatcher sUriMatcher;
    
    static {

        sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
        sUriMatcher.addURI(AUTHORITY , "dictionary", CINEMAS);
        sUriMatcher.addURI(AUTHORITY , "dictionary/#", CINEMA_ID);

    }

    @Override
    public boolean onCreate() {
        mDictionary = new CinemaDatabase(getContext());
        mOpenHelper = new CinemaOpenHelper(getContext());
        return true;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,
                        String sortOrder) {
        switch (sUriMatcher.match(uri)) {
            case CINEMA_ID:
            case CINEMAS:
            	return getCinema(selectionArgs);
            	
            default:
                throw new IllegalArgumentException("Unknown Uri: " + uri);
        }
//    	throw new UnsupportedOperationException("Search does not supported");
    }
    
    private Cursor getCinema(String[] selectionArgs) {
         return mDictionary.getCinema(selectionArgs, null);
    }

     /**
     * This method is required in order to query the supported types.
     * It's also useful in our own query() method to determine the type of Uri received.
     */
    @Override
    public String getType(Uri uri) {
        switch (sUriMatcher.match(uri)) {
            case CINEMA_ID:
                return DEFINITION_MIME_TYPE;
            case CINEMAS:
            	throw new IllegalArgumentException("Add was called!!! " + uri);
            default:
                throw new IllegalArgumentException("Unknown URL " + uri);
        }
    }

    @Override
    public Uri insert(Uri uri, ContentValues values) {
    	// Validates the incoming URI. Only the full provider URI is allowed for inserts.
        if (sUriMatcher.match(uri) != CINEMAS) {
            throw new IllegalArgumentException("Here should be ADD uri! " + uri);
        }

        // Gets the current system time in milliseconds
        Long now = Long.valueOf(System.currentTimeMillis());

        // If the values map doesn't contain the creation date, sets the value to the current time.
        if (values.containsKey(Cinema.COLUMN_NAME_CREATE_DATE) == false) {
            values.put(Cinema.COLUMN_NAME_CREATE_DATE, now);
        }

        SQLiteDatabase db = mOpenHelper.getWritableDatabase();

        long rowId = db.insertWithOnConflict(
            CinemaDatabase.TABLE_NAME,       
            Cinema.COLUMN_NAME_ID_S,         
            values,                          
            SQLiteDatabase.CONFLICT_IGNORE   
        );

        if (rowId > 0) {
            Uri noteUri = ContentUris.withAppendedId(CONTENT_ID_URI_BASE, rowId);

            getContext().getContentResolver().notifyChange(noteUri, null);
            return noteUri;
        }

        // If the insert didn't succeed, then the rowID is <= 0. Throws an exception.
        throw new SQLException("Failed to insert row into " + uri);
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        throw new UnsupportedOperationException();
    }

   
    @Override
    public int update(Uri uri, ContentValues values, String where, String[] whereArgs) {

        // Opens the database object in "write" mode.
        SQLiteDatabase db = mOpenHelper.getWritableDatabase();
        int count;
        String finalWhere;

        // Does the update based on the incoming URI pattern
        switch (sUriMatcher.match(uri)) {

            // If the incoming URI matches the general notes pattern, does the update based on
            // the incoming data.
            case CINEMAS:

                // Does the update and returns the number of rows updated.
                count = db.update(
                	CinemaDatabase.TABLE_NAME, // The database table name.
                    values,                   // A map of column names and new values to use.
                    where,                    // The where clause column names.
                    whereArgs                 // The where clause column values to select on.
                );
                break;

            // If the incoming URI matches a single note ID, does the update based on the incoming
            // data, but modifies the where clause to restrict it to the particular note ID.
//            case CINEMA_ID:
//                // From the incoming URI, get the note ID
//                String noteId = uri.getPathSegments().get(Cinema.NOTE_ID_PATH_POSITION);
//
//                /*
//                 * Starts creating the final WHERE clause by restricting it to the incoming
//                 * note ID.
//                 */
//                finalWhere =
//                        Cinema._ID +                              // The ID column name
//                        " = " +                                          // test for equality
//                        uri.getPathSegments().                           // the incoming note ID
//                            get(NotePad.Notes.NOTE_ID_PATH_POSITION)
//                ;
//
//                // If there were additional selection criteria, append them to the final WHERE
//                // clause
//                if (where !=null) {
//                    finalWhere = finalWhere + " AND " + where;
//                }
//
//
//                // Does the update and returns the number of rows updated.
//                count = db.update(
//                    NotePad.Notes.TABLE_NAME, // The database table name.
//                    values,                   // A map of column names and new values to use.
//                    finalWhere,               // The final WHERE clause to use
//                                              // placeholders for whereArgs
//                    whereArgs                 // The where clause column values to select on, or
//                                              // null if the values are in the where argument.
//                );
//                break;
            // If the incoming pattern is invalid, throws an exception.
            default:
                throw new IllegalArgumentException("Unknown URI " + uri);
        }

        /*Gets a handle to the content resolver object for the current context, and notifies it
         * that the incoming URI changed. The object passes this along to the resolver framework,
         * and observers that have registered themselves for the provider are notified.
         */
        getContext().getContentResolver().notifyChange(uri, null);

        // Returns the number of rows updated.
        return count;
    }

	

}
