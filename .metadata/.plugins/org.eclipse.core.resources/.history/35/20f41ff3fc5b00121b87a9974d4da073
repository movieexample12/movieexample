package com.listmovie.moviesforandroid;

import java.io.IOException ;
import java.io.UnsupportedEncodingException ;
import java.net.URL ;
import java.net.URLEncoder ;
import java.util.LinkedList ;
import java.util.List ;

import org.json.JSONArray ;
import org.json.JSONException ;

import net.sf.jtmdb.BrowseOptions ;
import net.sf.jtmdb.GeneralSettings ;
import net.sf.jtmdb.Log ;
import net.sf.jtmdb.Movie ;
import net.sf.jtmdb.GeneralSettings.Utilities ;
import net.sf.jtmdb.Log.Verbosity ;

public class MovieAndroid {

    protected static final String BASE_URL = "http://api.themoviedb.org/2.1/";
   
    protected static final String MOVIE_SEARCH_URL = "Movie.search/";
   
    protected static final String MOVIE_GETINFO_URL = "Movie.getInfo/";
    
    protected static final String MOVIE_BROWSE_URL = "Movie.browse/";
    
    protected static final String API_MODE_URL = "json";
    
    public static Movie getInfo(int ID) throws IOException, JSONException {
        Log.log("Getting info for Movie with id " + ID, Verbosity.NORMAL);
        if (GeneralSettings.getApiKey() != null
                && !GeneralSettings.getApiKey().equals("")) {
            try {
                URL call = new URL(BASE_URL
                        + MOVIE_GETINFO_URL
                        + GeneralSettings.getAPILocaleFormatted() + "/"
                        + API_MODE_URL + "/"
                        + GeneralSettings.getApiKey() + "/" + ID);
                String jsonString = Utilities.readUrlResponse(call).trim();
                if ((jsonString.startsWith("[") || jsonString.startsWith("{"))
                        && !jsonString.equals("[\"Nothing found.\"]")) {
                    JSONArray jsonArray = new JSONArray(jsonString.toString());
                    return new Movie(jsonArray);
                } else {
                    Log.log("Getting info for Movie with id " + ID
                            + " returned no results", Verbosity.NORMAL);
                }
            } catch (IOException e) {
                Log.log(e, Verbosity.ERROR);
                throw e;
            } catch (JSONException e) {
                Log.log(e, Verbosity.ERROR);
                throw e;
            }
        } else {
            Log.log("Error with the API key", Verbosity.ERROR);
        }
        return null;
    }

    public static List<Movie> browse(BrowseOptionsAndroid options) throws IOException,
    JSONException {
        Log.log("Browsing for Movies", Verbosity.NORMAL);
        if (GeneralSettings.getApiKey() != null
                && !GeneralSettings.getApiKey().equals("")) {
            try {
                URL call = new URL(BASE_URL
                        + MOVIE_BROWSE_URL
                        + GeneralSettings.getAPILocaleFormatted() + "/"
                        + API_MODE_URL + "/"
                        + GeneralSettings.getApiKey() + "?"
                        + options.buildQuery());
                String jsonString = Utilities.readUrlResponse(call).trim();
                List<Movie> results = new LinkedList<Movie>();
                if ((jsonString.startsWith("[") || jsonString.startsWith("{"))
                        && !jsonString.equals("[\"Nothing found.\"]")) {
                    JSONArray jsonArray = new JSONArray(jsonString.toString());
                    for (int i = 0; i < jsonArray.length(); i++) {
                        results.add(new Movie(jsonArray.getJSONObject(i)));
                    }
                } else {
                    Log.log("Browsing for Movies returned no results",
                            Verbosity.NORMAL);
                }
                return results;
            } catch (IOException e) {
                Log.log(e, Verbosity.ERROR);
                throw e;
            } catch (JSONException e) {
                Log.log(e, Verbosity.ERROR);
                throw e;
            }
        } else {
            Log.log("Error with the API key", Verbosity.ERROR);
        }
        return null;
    }

    public static List<Movie> search(String name) throws IOException,
    JSONException {
        Log.log("Performing a Movie search for \"" + name + "\"",
                Verbosity.NORMAL);
        try {
            name = URLEncoder.encode(name, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            name = name.replaceAll(" ", "%20");
        }
        if (GeneralSettings.getApiKey() != null
                && !GeneralSettings.getApiKey().equals("")) {
            if (name != null && !name.equals("")) {
                try {
                    URL call = new URL(BASE_URL
                            + MOVIE_SEARCH_URL
                            + GeneralSettings.getAPILocaleFormatted() + "/"
                            + API_MODE_URL + "/"
                            + GeneralSettings.getApiKey() + "/" + name);
                    String jsonString = Utilities.readUrlResponse(call).trim();
                    List<Movie> results = new LinkedList<Movie>();
                    if ((jsonString.startsWith("[") || jsonString
                            .startsWith("{"))
                            && !jsonString.equals("[\"Nothing found.\"]")) {
                        JSONArray jsonArray = new JSONArray(jsonString
                                .toString());
                        for (int i = 0; i < jsonArray.length(); i++) {
                            results.add(new Movie(jsonArray.getJSONObject(i)));
                        }
                    } else {
                        Log.log("Search for \"" + name
                                + "\" returned no results", Verbosity.NORMAL);
                    }
                    return results;
                } catch (IOException e) {
                    Log.log(e, Verbosity.ERROR);
                    throw e;
                } catch (JSONException e) {
                    Log.log(e, Verbosity.ERROR);
                    throw e;
                }
            } else {
                Log.log("Cannot search for a null or empty string",
                        Verbosity.ERROR);
            }
        } else {
            Log.log("Error with the API key", Verbosity.ERROR);
        }
        return null;
        }

    
    /**
     * 
     */
    private static final long serialVersionUID = 1L ;
    
}
